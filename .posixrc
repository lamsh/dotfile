#!/bin/sh
################################################################################
## \file      .posixrc
## \author    SENOO, Ken
## \copyright CC0
################################################################################

## \brief POSIX compatible shell configure

is_cmd_enabled(){
	hash "$@" 2>/dev/null
}

is_option_enabled(){(
	: ${CMD:=$1} ${OPT=$2}
	"$CMD" --help 2>&1 | grep -q -- "$OPT"'[=[, ]'
)}

### Interactive shell local development PATH
case "$-" in *i*)
	### System path
	[ -z "$PATH"            -o -n "${PATH%%*sbin*}"           ] &&
		export PATH="/usr/local/sbin:/usr/sbin:/sbin:$PATH"
	[ -z "$LD_LIBRARY_PATH" -o -n "${LD_LIBRARY_PATH%%*lib*}" ] &&
		export LD_LIBRARY_PATH="/usr/local/lib:/usr/lib:/lib:$LD_LIBRARY_PATH"
	[ -z "$CPATH"           -o -n "${CPATH%%*include*}"       ] &&
		export CPATH="/usr/local/include:/usr/include:$CPATH"
	[ -z "$MANPATH"         -o -n "${MANPATH%%*man*}"         ] &&
		export MANPATH="/usr/local/share/man:/usr/share/man:$MANPATH"
	[ -z "$INFOPATH"        -o -n "${INFOPATH%%*info*}"       ] &&
		export INFOPATH="/usr/local/share/info:/usr/share/info:$INFOPATH"
	[ -z "$PKG_CONFIG_PATH" -o -n "${PKG_CONFIG_PATH%%*pkg*}" ] &&
		export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/lib/pkgconfig:${PKG_CONFIG_PATH}"

	### Local path
	LOCAL="$HOME/.local"
	case "$PATH" in *"$LOCAL"*);; *)
		export PATH="$LOCAL/bin:$PATH"
		export LD_LIBRARY_PATH="$LOCAL/lib:$LD_LIBRARY_PATH"
		export CPATH="$LOCAL/include:$CPATH"
		export MANPATH="$LOCAL/share/man:$MANPATH"
		export INFOPATH="$LOCAL/share/info:$INFOPATH"
		export PKG_CONFIG_PATH="$LOCAL/lib/pkgconfig:${PKG_CONFIG_PATH}"
	esac

	## Language specific configuration
	# export GEM_HOME="$LOCAL"       # ruby gem
	# export PYTHONUSERBASE="$LOCAL" # python pip
	: ${PYTHONVERSION:=$(python3 -V 2>&1 | grep -E -o '[0-9]+\.[0-9]+')}

	### Locale
	export LANG='ja_JP.UTF-8'
	export LANGUAGE='en'
	export LC_TIME='en_US.UTF-8'
	export LC_MESSAGES='en_US.UTF-8'

	## Invalid stty keybind
	# stty start undef
	export DISPLAY="${DISPLAY:-:0}"  # if DISPLAY is none, then set.

	## Utility
	N='/dev/null'

	## Environmental variables
	: ${HOME:=~}      # for MSYS
esac

### Windows shell
export CYGWIN='nodosfilewarning winsymlinks:nativestrict'
export MSYS='winsymlinks:nativestrict'

### For wine
export WINEARCH='win32'
export WINEPREFIX="$HOME/.wine32"

### For .deb package
export DEBFULLNAME='Ken SENOO'
export DEBEMAIL='mslamsh20131029@outlook.jp'

### For unzip encoding
if grep -sq 'debian' /etc/os-release; then
	export UNZIP='-O cp932'
	export ZIPINFO='-O cp932'
fi

: ${LOGNAME:=$(logname)}  # for Windows shell
: ${COLUMNS:=80}          # for sh

## Prompt
PURPLE='\033[35m'
RED='\033[31m'
CLEAR='\033[m'

if [ -n "$BASH" ]; then
	ENCLOSE_OPEN='\\\['
	ENCLOSE_CLOSE='\\\]'
elif [ -n "$ZSH_NAME" ]; then
	ENCLOSE_OPEN='%%{'
	ENCLOSE_CLOSE='%%}'
fi

for color in PURPLE RED CLEAR
do
	eval "${color}=${ENCLOSE_OPEN}\$${color}${ENCLOSE_CLOSE}"
done

CWD='$(pwd | sed s@$HOME@~@)'
USERNAME=$(id -nu)
HOST=$(uname -n)
[ $(id -u) = 0 ] && PROMPT_SIGN='#' || PROMPT_SIGN='$'
PROMPT_NAME="$PURPLE$USERNAME@$HOST:$RED"
PROMPT_MARK="$PURPLE$PROMPT_SIGN $CLEAR"

PS1="\$([ \$((COLUMNS - \$(echo \"$USERNAME@$HOST:$CWD$\" | wc -m))) -le 15 ] &&
	printf '$PROMPT_NAME'\"$CWD\"'\n$PROMPT_MARK' ||
	printf '$PROMPT_NAME'\"$CWD\"'''$PROMPT_MARK' )"

## TODO: enable posix compatible
## Terminal title
case "$TERM" in ?term*|rxvt*|screen*)
	PROMPT_COMMAND='printf "\033]0;$0@$HOST: $(pwd | sed s@$HOME@~@)\007"'
esac


## Alias
### Enable alias in non-interactive shell
[ -n "$BASH"     ] && shopt -s expand_aliases
[ -n "$ZSH_NAME" ] && setopt aliases

### Windows character encoding convert
if [ "$OS" = "Windows_NT" ]; then
	wincmd(){
	  CMD=$1
	  shift
	  $CMD $* 2>&1 | iconv -f CP932 -t UTF-8
	}

	alias ipconfig='wincmd ipconfig'
	alias netstat='wincmd netstat'
	alias netsh='wincmd netsh'
	alias taskkill='wincmd taskkill'
	alias reg='wincmd reg'
	alias cs='wincmd cscript.exe -NoLogo'
	alias ws='wincmd wscript.exe -NoLogo'
	alias choco='wincmd choco'
else
	alias cs='wine cscript.exe -NoLogo'
	alias ws='wine wscript.exe -NoLogo'
fi

### ls
alias ls='ls -AFh --color=auto'
alias ll="ls -Gl --time-style=+'%Y-%m-%d %H:%M'"
alias l='ls'

### ls color
if is_cmd_enabled dircolors; then
	[ -f "${d:=$HOME/.dir_colors}" ] && eval $(dircolors $d) || eval $(dircolors)
fi

### Default to human readable figures
alias df='df -h'
alias du='du -h'
alias ps='ps w'

### Git
alias gic='git commit -am'
alias gia='git add'
alias gim='git mv'
alias gis='git status'
alias glone='git clone'

### Pager
export PAGER='less'
is_cmd_enabled lv && export PAGER='lv'

export LV='-c -l'
export LESS='-imR'
alias info='info --vi-keys'


### Open
alias o='open'
case "$OSTYPE" in
	freebsd*|darwin*) alias o='open' ;;
	linux*)           alias open='xdg-open' ;; # alias open="gnome-open";;
	cygwin*)          alias open='cygstart' ;;
	msys*)            alias open='start';;
esac

#### Copy to clipboard
if   is_cmd_enabled clip   ; then  # MSYS (Windows)
	alias clip='iconv -s -f UTF-8 -t CP932 | clip'
elif is_cmd_enabled xsel   ; then  # Linux
	alias clip='xsel -ib'
elif is_cmd_enabled putclip; then  # Cygwin
	alias clip='putclip'
elif is_cmd_enabled pbcopy ; then  # Mac
	alias clip='pbcopy'
fi

### development
alias py='python3'
alias py2='python2'
alias py3='python3'
alias ipy='ipython3'
alias ipy2='ipython2'
alias ipy3='ipython3'
alias rb='ruby'
alias gp='g++ -Wall -Wextra -pedantic -std=c++1y'
alias gc='gcc -Wall -Wextra -pedantic -std=gnu11'
alias gf='gfortran -Wall -O3 -static'

is_cmd_enabled xstow && alias stow='xstow'

## stow conflict list
# --ignore="dir|gschemas.compiled|icon-theme-cache"
alias stow="stow --ignore='dir|gschemas.compiled|icon-theme.cache'"

if is_cmd_enabled vim; then
	alias vi='vim'
	alias vim='vim -X'
	export EDITOR='vim'
fi
# export SVN_EDITOR=$EDITOR

alias now='date +%Y%m%dT%H%M%S'

# zshでは{=var}というようにして空白区切りで展開して使う。じゃないと使えない
# WXCONFIG=$(wx-config --cppflags --libs 2>&- | tr \"\n\" ' ')
WXCONFIG=$(wx-config --cppflags --libs 2>&-)
GTKCONFIG=$(pkg-config --cflags --libs gtk+-3.0 2>&-)
LIBCPP='-static-libgcc -static-libstdc++'

## For --exclude list
EXCLUDE_FILE='{tags,GTAGS,GRTAGS,GPATH}'
EXCLUDE_DIR='{.,..,node_modules,.git,.svn,obj}'

## In grep 2.21 or later, deprecated GREP_OPTIONS environmental variable
GREP_OPTIONS="--color=auto -I --exclude=$EXCLUDE_FILE"
if is_option_enabled grep --exclude-dir; then  # v2.5.2 or later
	GREP_OPTIONS="$GREP_OPTIONS --exclude-dir=$EXCLUDE_DIR"
else  # --exclude=*dir* option is only available when --exclude-dir disabled
	GREP_OPTIONS="$GREP_OPTIONS --exclude={..*,*.git*,*.svn*}"
fi
alias grep="grep $GREP_OPTIONS"

alias ag='ag -fU'
alias ctags="ctags --exclude=$EXCLUDE_DIR"

: ${SCREEN_SHELL:=$(command -v zsh )}
: ${SCREEN_SHELL:=$(command -v bash)}

## For not having screen-256color, but having xterm-256color support.
case "$(toe -a 2>&-)" in
	*screen-256color*) SCREEN_TERM='screen-256color';;
	                *) SCREEN_TERM="$TERM"          ;;
esac

alias screen="screen -T $SCREEN_TERM -s $SCREEN_SHELL"
alias tmux="SHELL=$SCREEN_SHELL tmux"
